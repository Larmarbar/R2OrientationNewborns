function [V1data, WMmask, brainmaskpath]=MWIdec(patfolder, outpath, parameters, codepath, dataset) 
 %%% 
 %% Create and load all nii files, run orientation dependence scipt on DTI and decaes output 
 %%%
 
 % Inside patient data folder create new folder for output of current 
 % analysis and change into the output folder
 cd(patfolder);
 str = pwd;
 [~,pname] = fileparts(str);
 mkdir(parameters);
 cd(parameters);
 
 %%% get location of decaes output .t2parts and t2maps 
 
 % set voxelsize for nii creation
 if strcmp(dataset,'twoweeks') || contains(dataset, 'baseline')
    % Read GRASE data first as name needed to get header
     if contains(dataset, 'baseline')
         subdir = 'BASELINE';
     else 
         subdir = '2WEEKS';
     end
     

   
     header.matrix = [240,240,32];
     grasn = sprintf('../%s/mergedGRASE_bet.nii.gz', subdir)
     grase = niftiread_unzip(grasn);

     grasebet = sprintf('../%s/mergedGRASE_bet_mask.nii.gz',subdir);

     gunzip(grasebet);
     brainmaskload = niftiread(grasebet(1:end-3));
     graseinfo = niftiinfo(grasn)
     decinfo = graseinfo;
     voxelsize = graseinfo.PixelDimensions(1:3); 

     decinfo.PixelDimensions = graseinfo.PixelDimensions(1:3); 
     decinfo.ImageSize = graseinfo.ImageSize(1:3);

     decinfo.Datatype = 'double';
     decinfo = rmfield(decinfo, 'Filename');
     decinfo = rmfield(decinfo, 'Filesize');

     decinfo = rmfield(decinfo, 'BitsPerPixel');
       
 elseif strcmp(dataset,'neon')
    load('../MWI_matlab.mat', 'hdr');
    voxelsize = hdr.voxelsize;
    grasn = dir(['../Series*T2W*'])
    grasn = sprintf('../%s/merged.nii', grasn.name)
    grase = niftiread(grasn);
    graseinfo = niftiinfo(grasn);
    voxelsize = graseinfo.PixelDimensions(1:3);
    header.matrix = [240,240,32];
    grasebet = '../GRASE_median_bet_mask.nii.gz';
    gunzip('../GRASE_median_bet_mask.nii.gz');
    brainmaskload = niftiread('../GRASE_median_bet_mask.nii');
     decinfo = graseinfo;

     decinfo.PixelDimensions = graseinfo.PixelDimensions(1:3); 
     decinfo.ImageSize = graseinfo.ImageSize(1:3);

     decinfo.Datatype = 'double';
     decinfo = rmfield(decinfo, 'Filename');
     decinfo = rmfield(decinfo, 'Filesize');

     decinfo = rmfield(decinfo, 'BitsPerPixel');
 end
 
 %%% get decaes output filenames 
 partsfile = dir('*t2parts.mat');
 partsfile = partsfile(1).name;
 mapfile = dir('*t2maps.mat');
 mapfile = mapfile(1).name;
 distfile = dir('*t2dist.mat');
 distfile = distfile(1).name;

 %%% Load T2parts and make nii 
 parts = load(partsfile); 
 
 %%% Load T2maps and save as nii 
 mapfile = dir('*t2maps.mat');
 mapfile = mapfile(1).name;
 MWImap = load(mapfile); 

 size(MWImap.ggm)
 niftiwrite(MWImap.ggm, 'GGM_dec', decinfo);
 niftiwrite(parts.mgm, 'MGM_dec', decinfo);
 niftiwrite(parts.sgm, 'SGM_dec', decinfo);
 niftiwrite(parts.sfr, 'SFR_dec', decinfo);

 
 %%% create and save nii for T2 distribution
 load(distfile);
 mkdir('distnii');
 cd('distnii');
 distsize = size(dist)
 for i=1:distsize(4)
     distnii = make_nii(dist(:,:,:,i), voxelsize);
     save_nii(distnii, sprintf('dist_%i_dec.nii',i));
 end
 cd('..');
 currpath = pwd;
 
 %%% Run flipping (and registration for neonates) script for all of the nii files above
 if strcmp(dataset, 'neon')
    sprintf('%s', parameters)
    cd(codepath);
    python('regonepat.py', pname);
    cd(currpath);
%  else
%     python('fliponeadult.py', pname, dataset);
 end
 
 %%% Set Input Nii files for decaes, DTI and mask data 
 
  if strcmp(dataset, 'neon') 
      % set which GRASE echo etc was used for registration
     refgrase = 'GRASEmedian';
     GGMdata = 'GGM_dec.nii';
     MGMdata = 'MGM_dec.nii';
     SGMdata = 'SGM_dec.nii';
     SFRdata = 'SFR_dec.nii';
     QSMdata = sprintf('../qsm_mean_to_%s.nii.gz',refgrase);
     
    V1data = sprintf('../dtifit_V1_to_%s.nii.gz',refgrase);
    FAdata = sprintf('../FA_to_%s.nii.gz',refgrase);
%      FAdata = sprintf('../dtifit_FA.nii');
% 
%      RDdata = sprintf('../dtifit_RD.nii',refgrase);
%      MDdata = sprintf('../dtifit_MD.nii',refgrase);
%      L1data = sprintf('../dtifit_L1.nii',refgrase);
    RDdata = sprintf('../dtifit_RD_to_%s.nii.gz',refgrase);
    MDdata = sprintf('../dtifit_MD_to_%s.nii.gz',refgrase);
    L1data = sprintf('../dtifit_L1_to_%s.nii.gz',refgrase);
     
%      WMmask = '../WM_mask_FA_fast.nii.gz';
     WMmask = '../WM_mask_FA_thr15_edit.nii.gz';
%      WMmask =  grasebet;

 elseif contains(dataset, 'baseline') | contains(dataset, 'twoweeks')
     % set which GRASE echo etc was used for registration
     
     refgrase = 'GRASE0';

     GGMdata = 'GGM_dec.nii';
     MGMdata = 'MGM_dec.nii';
     SGMdata = 'SGM_dec.nii';
     SFRdata = 'SFR_dec.nii';
     
     T1data = sprintf('../%s/T1_to_%s.nii.gz', subdir, refgrase);
     T2data = sprintf('../%s/GRASE_3echo_mean_20.nii.gz',subdir);
     
     V1data = sprintf('../%s/dtifit_V1_to_%s.nii.gz', subdir, refgrase);
     FAdata = sprintf('../%s/dtifiteddy_FA_to_%s.nii.gz', subdir, refgrase);
     RDdata = sprintf('../%s/dtifiteddy_RD_to_%s.nii.gz', subdir, refgrase);
     MDdata = sprintf('../%s/dtifiteddy_MD_to_%s.nii.gz', subdir, refgrase);
     L1data = sprintf('../%s/dtifiteddy_L1_to_%s.nii.gz', subdir, refgrase);
%      
% % %      V1data = sprintf('../%s/dtifiteddy_V1.nii.gz', subdir);
% % %      FAdata = sprintf('../%s/dtifiteddy_FA.nii.gz', subdir);
% % %      RDdata = sprintf('../%s/dtifiteddy_RD.nii.gz', subdir);
% % %      MDdata = sprintf('../%s/dtifiteddy_MD.nii.gz', subdir);
% % %      L1data = sprintf('../%s/dtifiteddy_L1.nii.gz', subdir);
     
%      WMmask = sprintf('../%s/WM_dtifit_FA_thr_40.nii.gz', subdir);
%      WMmask = sprintf('../%s/dtifit_FA_thr_70.nii.gz', subdir);
%      WMmask = sprintf('../%s/dtifit_FA_50_70.nii.gz', subdir);
%      WMmask = sprintf('../%s/dtifit_FA_30_50.nii.gz', subdir);

%%WMmask = sprintf('../%s/WM_mask_T1_to_DTI.nii.gz',subdir);
% % %     WMmask = sprintf('../%s/WM_mask_T1_prereg.nii.gz',subdir);
    WMmask = sprintf('../%s/WM_mask_T1.nii.gz',subdir);

%     WMmask =  grasebet;
% % %     brainmaskpath = sprintf('../%s/T1_mask_to_b0.nii.gz',subdir);

 end
 
 %%% RUN ORIENTATION SCRIPT AND PLOT FOR DECAES OUTPUT...
%runoronepar(V1data, WMmask, MGMdata, 'mgm', FAdata,pname);
%runoronepar(V1data, WMmask, SGMdata, 'sgm', FAdata,pname);
%runoronepar(V1data, WMmask, GGMdata, 'ggm', FAdata,pname);
%runoronepar(V1data, WMmask, SFRdata, 'sfr', FAdata,pname);
% runoronepar(V1data, WMmask, QSMdata, 'qsm', FAdata,pname);
% runoronepar(V1data, WMmask, T1data, 't1', FAdata,pname);
% runoronepar(V1data, WMmask, T2data, 't2', FAdata,pname);


% and for DTI parameters
runoronepar(V1data, WMmask, FAdata, 'fa', FAdata,pname);
runoronepar(V1data, WMmask, RDdata, 'rd', FAdata,pname);
runoronepar(V1data, WMmask, MDdata, 'md', FAdata,pname);
runoronepar(V1data, WMmask, L1data, 'l1', FAdata,pname);

close all 

%% Run Monoexp R2 and R2star Analysis 

% Monoexp R2 fit 
header.echotimes = 10*[1:32];
size(grase)
header.nechoes = 32;
monoexp = calculate_R2star(grase,brainmaskload,header);
mononii = make_nii(monoexp,voxelsize);
monon = 'MonoR2.nii.gz';
save_nii(mononii,'MonoR2.nii.gz');

% set echo times for SWI scans
if contains(pwd, 'baseline') || contains(pwd, '2weeks')
    % use SWI data registered to MWI space 
    swifile = sprintf('../%s/SWI_to_GRASE0.nii',subdir);
    gunzip(sprintf('%s.gz', swifile));
    swi = niftiread(swifile);
    header = niftiinfo(swifile);
    header.voxelsize =  header.PixelDimensions(1:3);
    header.echotimes = [6,12,18,24,30];
    header.nechoes = 5;
    brainmaskpath = sprintf('../%s/mergedGRASE_bet_mask.nii.gz',subdir);
    brainmask = niftiread_unzip(brainmaskpath);

    % R2 star exponential fit
    r2starbgcorr = bgf_correction_R2star(swi, header);
    r2starexp = calculate_R2star(r2starbgcorr,brainmask,header);
    r2starnii = make_nii(r2starexp,voxelsize);
    r2starn = 'R2star.nii.gz';
    save_nii(r2starnii,'R2star.nii.gz');

elseif contains(pwd, 'neonates_healthy')

    % use SWI data registered to MWI space 
    swifile = '../SWI_to_GRASEmedian.nii';
    gunzip(sprintf('%s.gz',swifile));
    swi = niftiread(swifile);
    header = niftiinfo(swifile);
    header.echotimes = [4.5,10,15.5,21,26.5];
    header.nechoes = 5;
    header.voxelsize = header.PixelDimensions(1:3);
    brainmaskpath = '../GRASE_median_bet_mask.nii.gz';
    brainmask = niftiread_unzip(brainmaskpath);
    %R2 star exponential fit
    r2starbgcorr = bgf_correction_R2star(swi, header);
    r2starexp = calculate_R2star(r2starbgcorr,brainmask,header);
    r2starnii = make_nii(r2starexp,voxelsize);
    r2starn = 'R2star.nii.gz';
    save_nii(r2starnii,'R2star.nii.gz');

end

%%% add in case neon reg to FA
% if strcmp(dataset, 'neon')
%     cd(codepath);
%     python('regmono.py', pname);
%     cd(currpath);
%     monon = 'MonoR2_to_FA.nii.gz';
% end


runoronepar(V1data, WMmask, monon, 'r2', FAdata,pname);

runoronepar(V1data, WMmask, r2starn, 'r2star', FAdata,pname);

%% Plot two parameters that are not the orientation agaist each other 
runrelpar(RDdata, WMmask, SFRdata, 'RD','SFR',pname);
runrelpar(SFRdata, WMmask, RDdata,'SFR', 'RD', pname);
runrelpar(GGMdata, WMmask, MGMdata, 'GGM','MGM',pname);
runrelpar(GGMdata, WMmask, monon, 'GGM','mR2',pname);
runrelpar(MGMdata, WMmask, monon, 'MGM','mR2',pname);
runrelpar(monon, WMmask, SFRdata, 'mR2','SFR',pname);
runrelpar(FAdata, WMmask, SFRdata, 'FA','SFR',pname);
runrelpar(GGMdata, WMmask, SFRdata, 'GGM','SFR',pname);

% check R2star map created by Alex W 
r2stara = '../r2star_to_GRASEmedian.nii.gz';

% runoronepar(V1data, WMmask, r2stara, 'r2starAlex',pname);

% neonates:
% runoronepar('../dtifit_V1.nii.gz', '../WM_FA_thr20_noreg.nii.gz', '../r2star_to_FAinv.nii.gz', 'r2starreg2', FAdata, pname);
% WM_FA_thr20_noreg.nii.gz 
% WM_FA_fast_noreg.nii
% 

%adults
% runoronepar('../BASELINE/dtifiteddy_V1.nii.gz', '../BASELINE/FA_WM_45_noreg.nii.gz', '../BASELINE/r2star_to_FAinv.nii.gz', 'r2starreg2',pname);
% runoronepar('../BASELINE/dtifiteddy_V1.nii.gz', '../BASELINE/FA_WM_45_noreg.nii.gz', '../BASELINE/MGM_to_FAinv.nii.gz', 'mgm_2_FA',pname);

% T2_8e-3_2.0_SPWin_8e-3_25e-3_MPWIN_25e-3_2.0


% delete unzipped nii so fsl doesn't complain about duplicates
% delete('../FA_to_GRASEmedian.nii')
% delete('../BASELINE/dtifit_FA_thr_70.nii')



end 